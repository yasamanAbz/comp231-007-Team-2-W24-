{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brayd\\\\Documents\\\\ALL COLLEGE PROGRAMS\\\\comp231-007-Team-2-W24-\\\\comp231-007-Team-2-W24-\\\\frontend\\\\src\\\\components\\\\HealthTracking\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HealthGoalsInterface() {\n  _s();\n  // State to manage the list of goals\n  const [goals, setGoals] = useState([]);\n\n  // Function to add goal to the list\n  function addGoal(description, target, deadline) {\n    setGoals([...goals, {\n      description,\n      target,\n      deadline,\n      progress: 0,\n      achieved: false\n    }]);\n  }\n\n  // Function to remove goal from the list\n  function removeGoal(index) {\n    setGoals(goals.filter((goal, i) => i !== index));\n  }\n\n  // Function to update goal details\n  function saveChanges(index, updatedDescription, updatedTarget, updatedDeadline) {\n    const updatedGoals = [...goals];\n    updatedGoals[index] = {\n      ...updatedGoals[index],\n      description: updatedDescription,\n      target: updatedTarget,\n      deadline: updatedDeadline\n    };\n    setGoals(updatedGoals);\n  }\n\n  // Function to toggle achieved status\n  function toggleAchieved(index) {\n    const updatedGoals = [...goals];\n    updatedGoals[index].achieved = !updatedGoals[index].achieved;\n    setGoals(updatedGoals);\n  }\n\n  // JSX for displaying goals\n  const goalList = goals.map((goal, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n    className: goal.achieved ? 'achieved' : '',\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: goal.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \" - Target: \", goal.target, \", Deadline: \", goal.deadline, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeGoal(index),\n      children: \"Remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => toggleAchieved(index),\n      children: \"Mark as Achieved\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => updateProgress(index),\n      children: \"Update Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this));\n\n  // JSX for the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Health Goals Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"goalDescription\",\n        children: \"Goal Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"goalDescription\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"goalTarget\",\n        children: \"Target:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"goalTarget\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"goalDeadline\",\n        children: \"Deadline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"goalDeadline\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Set Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"goalList\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Goals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: goalList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n\n  // Function to handle form submission\n  function handleSubmit(event) {\n    event.preventDefault();\n    const description = event.target.goalDescription.value;\n    const target = event.target.goalTarget.value;\n    const deadline = event.target.goalDeadline.value;\n    addGoal(description, target, deadline);\n    event.target.reset(); // Clear form fields after submission\n  }\n\n  // Function to update progress and goal details\n  function updateProgress(index) {\n    // Your implementation for updating progress\n  }\n}\n_s(HealthGoalsInterface, \"ko/0eANj+56wDfcahLqKNG12Td8=\");\n_c = HealthGoalsInterface;\nexport default HealthGoalsInterface;\nvar _c;\n$RefreshReg$(_c, \"HealthGoalsInterface\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HealthGoalsInterface","_s","goals","setGoals","addGoal","description","target","deadline","progress","achieved","removeGoal","index","filter","goal","i","saveChanges","updatedDescription","updatedTarget","updatedDeadline","updatedGoals","toggleAchieved","goalList","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","updateProgress","onSubmit","handleSubmit","htmlFor","type","id","required","event","preventDefault","goalDescription","value","goalTarget","goalDeadline","reset","_c","$RefreshReg$"],"sources":["C:/Users/brayd/Documents/ALL COLLEGE PROGRAMS/comp231-007-Team-2-W24-/comp231-007-Team-2-W24-/frontend/src/components/HealthTracking/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction HealthGoalsInterface() {\n  // State to manage the list of goals\n  const [goals, setGoals] = useState([]);\n\n  // Function to add goal to the list\n  function addGoal(description, target, deadline) {\n    setGoals([...goals, { description, target, deadline, progress: 0, achieved: false }]);\n  }\n\n  // Function to remove goal from the list\n  function removeGoal(index) {\n    setGoals(goals.filter((goal, i) => i !== index));\n  }\n\n  // Function to update goal details\n  function saveChanges(index, updatedDescription, updatedTarget, updatedDeadline) {\n    const updatedGoals = [...goals];\n    updatedGoals[index] = {\n      ...updatedGoals[index],\n      description: updatedDescription,\n      target: updatedTarget,\n      deadline: updatedDeadline\n    };\n    setGoals(updatedGoals);\n  }\n\n  // Function to toggle achieved status\n  function toggleAchieved(index) {\n    const updatedGoals = [...goals];\n    updatedGoals[index].achieved = !updatedGoals[index].achieved;\n    setGoals(updatedGoals);\n  }\n\n  // JSX for displaying goals\n  const goalList = goals.map((goal, index) => (\n    <li key={index} className={goal.achieved ? 'achieved' : ''}>\n      <span>{goal.description}</span> - Target: {goal.target}, Deadline: {goal.deadline}\n      <button onClick={() => removeGoal(index)}>Remove</button>\n      <button onClick={() => toggleAchieved(index)}>Mark as Achieved</button>\n      <button onClick={() => updateProgress(index)}>Update Progress</button>\n    </li>\n  ));\n\n  // JSX for the component\n  return (\n    <div className=\"container\">\n      <h1>Health Goals Interface</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"goalDescription\">Goal Description:</label>\n        <input type=\"text\" id=\"goalDescription\" required />\n        <label htmlFor=\"goalTarget\">Target:</label>\n        <input type=\"text\" id=\"goalTarget\" required />\n        <label htmlFor=\"goalDeadline\">Deadline:</label>\n        <input type=\"date\" id=\"goalDeadline\" required />\n        <button type=\"submit\">Set Goal</button>\n      </form>\n      <div id=\"goalList\">\n        <h2>My Goals</h2>\n        <ul>{goalList}</ul>\n      </div>\n    </div>\n  );\n\n  // Function to handle form submission\n  function handleSubmit(event) {\n    event.preventDefault();\n    const description = event.target.goalDescription.value;\n    const target = event.target.goalTarget.value;\n    const deadline = event.target.goalDeadline.value;\n    addGoal(description, target, deadline);\n    event.target.reset(); // Clear form fields after submission\n  }\n\n  // Function to update progress and goal details\n  function updateProgress(index) {\n    // Your implementation for updating progress\n  }\n}\n\nexport default HealthGoalsInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}